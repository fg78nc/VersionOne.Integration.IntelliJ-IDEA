<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="VersionOneIdeaPlugin" default="ccnet.build">

    <property file="build.properties"/>

    <property name="compiler.debug" value="on"/>
    <property name="compiler.generate.no.warnings" value="off"/>
    <property name="compiler.max.memory" value="128m"/>
    <property name="compiler.args" value=""/>

    <!--Settings-->
    <property name="ver.major" value="9"/>
    <property name="ver.minor" value="0"/>
    <property name="ver.build" value="0"/>
    <property name="publish.dir" value="./_publish"/>
    <property name="build.version" value="${ver.major}.${ver.minor}.${ver.build}"/>
    <property name="jar.filename" value="V1IdeaPlugin.jar"/>
    <property name="zip.filename" value="V1IdeaPlugin.${build.version}.zip"/>
    <property name="source.zip.filename" value="V1IdeaPlugin.Source.${build.version}.zip"/>
    <property name="coverage.file" value="cobertura.ser"/>

    <!-- Directories -->
    <property name="base.dir" value="."/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="idea.lib.dir" value="${basedir}/idea_lib"/>
    <property name="res.dir" value="${basedir}/res"/>
    <property name="src.dir" value="${basedir}/src"/>
    <property name="tests.dir" value="${basedir}/tests"/>
    <property name="distr.dir" value="${basedir}/distr"/>


    <!-- Build Directories -->
    <property name="build.dir" value="${basedir}/Common"/>
    <property name="bin.product.dir" value="${build.dir}/bin_production"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="coverage.dir" value="coverage"/>
    <property name="coverage.classes" value="${coverage.dir}/classes"/>
    <property name="coverage.junit" value="${coverage.dir}/junit"/>
    <property name="publish.lib.dir" value="${publish.dir}/tmpl/VersionOne/lib"/>
    <property name="doc.dir" value="doc"/>

    <path id="classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="idea.classpath">
        <fileset dir="${idea.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>

    </path>

    <patternset id="compiler.resources">
        <include name="**/?*.properties"/>
        <include name="**/?*.xml"/>
        <include name="**/?*.gif"/>
        <include name="**/?*.png"/>
        <include name="**/?*.jpeg"/>
        <include name="**/?*.jpg"/>
        <include name="**/?*.html"/>
        <include name="**/?*.dtd"/>
        <include name="**/?*.tld"/>
    </patternset>

    <taskdef name="javac2" classname="com.intellij.ant.Javac2">
        <classpath>
            <fileset dir="${idea.lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
        </classpath>
    </taskdef>

    <taskdef classpath="${lib.dir}/cobertura.jar" resource="tasks.properties">
        <classpath>
            <fileset dir="${lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
        </classpath>
    </taskdef>

    <target name="compile.clean">
        <delete dir="${bin.product.dir}"/>
        <delete dir="${build.dir}"/>
    </target>

    <target name="plugin.compile.idea" description="Compile VersionOne plugin for IDEA">
        <mkdir dir="${bin.product.dir}"/>
        <javac2 destdir="${bin.product.dir}" debug="${compiler.debug}"
            nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}"
            fork="true" executable="${java.dir}/javac" target="1.5">
            <compilerarg line="${compiler.args}"/>
            <!--<bootclasspath refid="idea.module.bootclasspath"/>-->
            <classpath refid="classpath"/>
            <classpath refid="idea.classpath"/>

            <src path="${tests.dir}"/>
            <src path="${src.dir}"/>
            <!--<patternset refid="excluded.from.compilation.idea"/>-->
        </javac2>

        <copy todir="${bin.product.dir}">
            <fileset dir="${res.dir}">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>


    <target name="build.clean">
        <delete file="${build.dir}/${jar.filename}"/>
    </target>

    <target name="plugin.build.idea" depends="plugin.compile.idea">
        <mkdir dir="${distr.dir}"/>

        <jar destfile="${distr.dir}/${jar.filename}" duplicate="preserve">
            <zipfileset dir="${bin.product.dir}" prefix=""/>
            <zipfileset file="${base.dir}/META-INF/plugin.xml" prefix="META-INF"/>
            <manifest>
                <attribute name="BuiltBy" value="VersionOne"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="BuildVersion" value="${build.version}"/>
                <attribute name="BuildRev" value="${ver.build}"/>				
            </manifest>
        </jar>
    </target>

    <target name="package.clean">
        <delete dir="${distr.dir}"/>
        <delete file="${zip.filename}"/>
        <delete file="${zip.source.filename}"/>
        <delete dir="${junit.output.dir}"/>
        <delete dir="." includes="cobertura.ser"/>
    </target>

    <target name="plugin.package.idea" depends="plugin.build.idea">
        <mkdir dir="${publish.lib.dir}"/>

        <copy file="${distr.dir}/${jar.filename}" todir="${publish.lib.dir}"/>
        <copy file="${lib.dir}/VersionOne.APIClient.jar"
            tofile="${publish.lib.dir}/VersionOne.APIClient.jar"/>

		<move todir="${publish.lib.dir}/../doc">
			<fileset dir="${doc.dir}"/>
		</move>

        <zip destfile="${publish.dir}/${zip.filename}">
            <fileset dir="${publish.dir}/tmpl/"/>
        </zip>
        <delete dir="${publish.dir}/tmpl"/>
		
		<zip destfile="${publish.dir}/${source.zip.filename}">
			<fileset dir="${base.dir}">
				<include name="build.xml"/>
				<include name="build.properties"/>
				<include name="stripDTD.xsl"/>
				<include name="res/**/*"/>
				<include name="src/**/*"/>
				<include name="tests/**/*"/>
				<include name="lib/**/*"/>
				<include name="DocSource/**/*"/>
			</fileset>
		</zip>		

		
    </target>

    <target name="init" description="Build initialization">
        <!-- Perform any build initialization in this target -->
    </target>

    <target name="coverage.init">
        <mkdir dir="${coverage.classes}"/>
        <mkdir dir="${coverage.junit}"/>
    </target>

    <target name="coverage.clean">
        <delete dir="${coverage.dir}"/>
        <delete file="${coverage.file}"/>
    </target>

    <target name="coverage" depends="plugin.compile.idea, coverage.clean, coverage.init" unless="skip.tests">
        <mkdir dir="${junit.output.dir}"/>
        <cobertura-instrument todir="${coverage.classes}" datafile="${coverage.file}">
            <fileset dir="${bin.product.dir}">
                <include name="**/*.class"/>
                <exclude name="**/*Tester.class"/>
            </fileset>
        </cobertura-instrument>

        <junit fork="true" printsummary="withOutAndErr" jvm="${java.dir}\..\jre\bin\java.exe">
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${coverage.file}"/>
            <!--<sysproperty key="test.websiteurl" value="${test.websiteurl}"/>-->

            <classpath>
                <pathelement location="${coverage.classes}"/>
                <pathelement location="${bin.product.dir}"/>
                <path refid="classpath"/>
                <path refid="idea.classpath"/>
            </classpath>
            <formatter type="xml"/>

            <batchtest fork="yes" todir="${junit.output.dir}">
                <fileset dir="${bin.product.dir}">
                    <include name="**/*Tester.class"/>
                </fileset>
            </batchtest>
        </junit>

        <cobertura-report datafile="${coverage.file}" destdir="${coverage.dir}/html">
            <fileset dir="${src.dir}" includes="**/*"/>
        </cobertura-report>
        <cobertura-report datafile="${coverage.file}" format="xml" destdir="${coverage.dir}">
            <fileset dir="${src.dir}" includes="**/*"/>
        </cobertura-report>
        <move file="${coverage.dir}/coverage.xml" tofile="${coverage.dir}/coverage.raw"/>
        <xslt destdir="${coverage.dir}" style="${base.dir}/stripDTD.xsl"
            in="${coverage.dir}/coverage.raw" out="${coverage.dir}/coverage.xml"/>
    </target>


    <!-- Create Documentation-->
    <macrodef name="gendoc.content.base">
        <attribute name="filename"/>
        <attribute name="collect.xref.targets"/>
        <attribute name="content.doc.output.dir" default="${doc.dir}/@{filename}"/>
        <sequential>
            <mkdir dir="@{content.doc.output.dir}"/>
            <echo>${doc.source.dir} [/] ${common.dir}/docbook/xsltproc/xsltproc.exe -o ../@{content.doc.output.dir}/@{filename}.html --stringparam current.docid @{filename} --stringparam target.database.document olinkdb.xml --stringparam collect.xref.targets ${collect.xref.targets} --stringparam targets.filename @{filename}.db Common/v1integration.xsl @{filename}/@{filename}.xml</echo>
            <exec dir="${doc.source.dir}" executable="${common.dir}/docbook/xsltproc/xsltproc.exe"
                failonerror="true">
                <arg
                    line="-o ../@{content.doc.output.dir}/@{filename}.html --stringparam current.docid @{filename} --stringparam target.database.document olinkdb.xml --stringparam collect.xref.targets ${collect.xref.targets} --stringparam targets.filename @{filename}.db Common/v1integration.xsl @{filename}/@{filename}.xml"
                />
            </exec>
        </sequential>
    </macrodef>

    <target name="gendoc.clean">
        <delete dir="${doc.dir}"/>
    </target>

    <target name="gendoc" depends="gendoc.clean">
        <property name="doc.source.dir" value="${basedir}/DocSource"/>
        <property name="common.dir" value="${doc.source.dir}/Common"/>

        <mkdir dir="${doc.dir}"/>
        <mkdir dir="${doc.dir}/Common"/>

        <copy file="${doc.source.dir}/Common/v1integration.css" todir="${doc.dir}/Common"/>

        <!-- this is the index file -->
        <echo>${doc.source.dir} [/] ${common.dir}/docbook/xsltproc/xsltproc.exe -o ../${doc.dir}/index.html Common/index.xsl index.xml</echo>
        <exec dir="${doc.source.dir}" executable="${common.dir}/docbook/xsltproc/xsltproc.exe"
            failonerror="true">
            <arg line="-o ../${doc.dir}/index.html Common/index.xsl index.xml"/>
        </exec>

        <gendoc.content.base filename="V1IntelliJPlugIn" collect.xref.targets="only"/>
        <gendoc.content.base filename="V1IntelliJPlugIn" collect.xref.targets="no"/>

        <copy todir="${doc.dir}/V1IntelliJPlugIn" flatten="false">
            <fileset dir="${doc.source.dir}/V1IntelliJPlugIn">
                <include name="*.jpg"/>
            </fileset>
        </copy>
    </target>


    <target name="test">
        <exec command="java -version"/>
    </target>

    <target name="clean"
        depends="compile.clean,package.clean,build.clean,coverage.clean,gendoc.clean"
        description="cleanup all"/>

    <target name="ccnet.build" depends="init, clean, coverage,gendoc,plugin.package.idea"
        description="build all"/>
</project>
